{"ast":null,"code":"var _jsxFileName = \"/home/charlie/MEGAsync/Ingenieria Sistemas/DECIMO SEMESTRE/Etica/app-ley842/components/CustomInput.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\"; // nodejs library to set properties for components\n\nimport PropTypes from \"prop-types\"; // nodejs library that concatenates classes\n\nimport classNames from \"classnames\"; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Input from \"@material-ui/core/Input\";\nimport styles from \"../assets/jss/nextjs-material-kit/components/customInputStyle\";\nconst useStyles = makeStyles(styles);\nexport default function CustomInput(props) {\n  const classes = useStyles();\n  const {\n    formControlProps,\n    labelText,\n    id,\n    labelProps,\n    inputProps,\n    error,\n    white,\n    inputRootCustomClasses,\n    success,\n    onChange\n  } = props;\n  const labelClasses = classNames({\n    [\" \" + classes.labelRootError]: error,\n    [\" \" + classes.labelRootSuccess]: success && !error\n  });\n  const underlineClasses = classNames({\n    [classes.underlineError]: error,\n    [classes.underlineSuccess]: success && !error,\n    [classes.underline]: true,\n    [classes.whiteUnderline]: white\n  });\n  const marginTop = classNames({\n    [inputRootCustomClasses]: inputRootCustomClasses !== undefined\n  });\n  const inputClasses = classNames({\n    [classes.input]: true,\n    [classes.whiteInput]: white\n  });\n  let formControlClasses;\n\n  if (formControlProps !== undefined) {\n    formControlClasses = classNames(formControlProps.className, classes.formControl);\n  } else {\n    formControlClasses = classes.formControl;\n  }\n\n  return __jsx(FormControl, _extends({}, formControlProps, {\n    className: formControlClasses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }), labelText !== undefined ? __jsx(InputLabel, _extends({\n    className: classes.labelRoot + \" \" + labelClasses,\n    htmlFor: id\n  }, labelProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }), labelText) : null, __jsx(Input, _extends({\n    classes: {\n      input: inputClasses,\n      root: marginTop,\n      disabled: classes.disabled,\n      underline: underlineClasses\n    },\n    id: id,\n    onChange: onChange\n  }, inputProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  })));\n}\nCustomInput.propTypes = {\n  labelText: PropTypes.node,\n  labelProps: PropTypes.object,\n  id: PropTypes.string,\n  inputProps: PropTypes.object,\n  formControlProps: PropTypes.object,\n  inputRootCustomClasses: PropTypes.string,\n  error: PropTypes.bool,\n  success: PropTypes.bool,\n  white: PropTypes.bool\n};","map":{"version":3,"sources":["/home/charlie/MEGAsync/Ingenieria Sistemas/DECIMO SEMESTRE/Etica/app-ley842/components/CustomInput.jsx"],"names":["React","PropTypes","classNames","makeStyles","FormControl","InputLabel","Input","styles","useStyles","CustomInput","props","classes","formControlProps","labelText","id","labelProps","inputProps","error","white","inputRootCustomClasses","success","onChange","labelClasses","labelRootError","labelRootSuccess","underlineClasses","underlineError","underlineSuccess","underline","whiteUnderline","marginTop","undefined","inputClasses","input","whiteInput","formControlClasses","className","formControl","labelRoot","root","disabled","propTypes","node","object","string","bool"],"mappings":"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","sourcesContent":["import React from \"react\";\n// nodejs library to set properties for components\nimport PropTypes from \"prop-types\";\n// nodejs library that concatenates classes\nimport classNames from \"classnames\";\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Input from \"@material-ui/core/Input\";\n\nimport styles from \"../assets/jss/nextjs-material-kit/components/customInputStyle\";\n\nconst useStyles = makeStyles(styles);\n\nexport default function CustomInput( props ) {\n    const classes = useStyles();\n    const {\n        formControlProps,\n        labelText,\n        id,\n        labelProps,\n        inputProps,\n        error,\n        white,\n        inputRootCustomClasses,\n        success,\n        onChange\n    } = props;\n\n    const labelClasses = classNames({\n        [\" \" + classes.labelRootError]: error,\n        [\" \" + classes.labelRootSuccess]: success && !error\n    });\n    const underlineClasses = classNames({\n        [classes.underlineError]: error,\n        [classes.underlineSuccess]: success && !error,\n        [classes.underline]: true,\n        [classes.whiteUnderline]: white\n    });\n    const marginTop = classNames({\n        [inputRootCustomClasses]: inputRootCustomClasses !== undefined\n    });\n    const inputClasses = classNames({\n        [classes.input]: true,\n        [classes.whiteInput]: white\n    });\n    let formControlClasses;\n    if (formControlProps !== undefined) {\n        formControlClasses = classNames(\n            formControlProps.className,\n            classes.formControl\n        );\n    } else {\n        formControlClasses = classes.formControl;\n    }\n    return (\n        <FormControl {...formControlProps} className={formControlClasses}>\n            {labelText !== undefined ? (\n                <InputLabel\n                    className={classes.labelRoot + \" \" + labelClasses}\n                    htmlFor={id}\n                    {...labelProps}\n                >\n                    {labelText}\n                </InputLabel>\n            ) : null}\n            <Input\n                classes={{\n                    input: inputClasses,\n                    root: marginTop,\n                    disabled: classes.disabled,\n                    underline: underlineClasses\n                }}\n                id={id}\n                onChange={onChange}\n                {...inputProps}\n            />\n        </FormControl>\n    );\n}\n\nCustomInput.propTypes = {\n    labelText: PropTypes.node,\n    labelProps: PropTypes.object,\n    id: PropTypes.string,\n    inputProps: PropTypes.object,\n    formControlProps: PropTypes.object,\n    inputRootCustomClasses: PropTypes.string,\n    error: PropTypes.bool,\n    success: PropTypes.bool,\n    white: PropTypes.bool\n};\n"]},"metadata":{},"sourceType":"module"}