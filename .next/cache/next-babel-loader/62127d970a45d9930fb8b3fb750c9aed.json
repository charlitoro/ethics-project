{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport styles from \"../../../assets/jss/nextjs-material-kit/pages/landingPageSections/commentsStyles\";\nimport { TextField, List, ListItem, ListItemAvatar, Avatar, ListItemText, Typography, CircularProgress } from '@material-ui/core';\nimport GridContainer from \"../../../components/Grid/GridContainer\";\nimport GridItem from \"../../../components/Grid/GridItem\";\nimport { executeQuery } from \"../../../plugins/graphqlQueryRequest\";\nimport { commentsQuery, createCommentMutation } from \"../../../utils/queries\";\nimport { AccountCircle, AddComment } from '@material-ui/icons';\nimport { map, orderBy, isEmpty } from 'lodash';\nimport moment from 'moment';\nimport Button from \"../../../components/Button\";\nimport { API_URL, CLIENT_ID } from \"../../../utils/constants\";\nimport { gql } from \"apollo-boost\";\nimport fetch from 'node-fetch';\nconst useStyles = makeStyles(styles);\n\nconst findComments = () => {\n  const {\n    data\n  } = executeQuery(gql(commentsQuery));\n\n  if (data && data.comments) {\n    return orderBy(data.comments, ({\n      createdAt\n    }) => {\n      return moment(createdAt);\n    }, ['desc']);\n  }\n};\n\nexport default function CommentsSection() {\n  const classes = useStyles();\n  const {\n    0: comments,\n    1: setComments\n  } = useState(findComments());\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState('');\n  const [loading, setLoading] = React.useState(false);\n\n  const handlerCommentText = event => {\n    setCommentText(event.target.value);\n  };\n\n  const handlerPostComment = async () => {\n    if (!isEmpty(commentText)) {\n      try {\n        setLoading(true);\n        await fetch(`${API_URL}`, {\n          method: 'POST',\n          body: JSON.stringify({\n            query: createCommentMutation,\n            variables: {\n              comment: commentText\n            }\n          }),\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            'Authorization': `client_id ${CLIENT_ID}`\n          }\n        }).then(res => res.json());\n        const {\n          data\n        } = await fetch(`${API_URL}`, {\n          method: 'POST',\n          body: JSON.stringify({\n            query: commentsQuery\n          }),\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            'Authorization': `client_id ${CLIENT_ID}`\n          }\n        }).then(res => res.json());\n        setCommentText('');\n        setComments(orderBy(data.comments, ({\n          createdAt\n        }) => {\n          return moment(createdAt);\n        }, ['desc']));\n        setLoading(false);\n      } catch (error) {\n        console.error('Error: ', error.message);\n      }\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: classes.section\n  }, __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 10\n  }, __jsx(TextField, {\n    id: \"outlined-multiline-static\",\n    label: \"Deja tu comentario\",\n    fullWidth: true,\n    multiline: true,\n    onChange: handlerCommentText,\n    rows: 4,\n    variant: \"outlined\"\n  }), __jsx(\"div\", {\n    className: classes.wrapper\n  }, __jsx(Button, {\n    disabled: loading,\n    color: \"rose\",\n    size: \"sm\",\n    onClick: handlerPostComment\n  }, __jsx(AddComment, {\n    className: \"fas fa-play\"\n  }), \" Comentar\"), loading && __jsx(CircularProgress, {\n    size: 24,\n    className: classes.buttonProgress\n  })))), __jsx(\"div\", null, __jsx(List, null, map(comments, ({\n    id,\n    content,\n    createdAt\n  }) => {\n    return __jsx(ListItem, {\n      key: id,\n      alignItems: \"flex-start\"\n    }, __jsx(ListItemAvatar, null, __jsx(Avatar, {\n      alt: \"Remy Sharp\"\n    }, \" \", __jsx(AccountCircle, null), \" \")), __jsx(ListItemText, {\n      primary: __jsx(React.Fragment, null, __jsx(Typography, {\n        component: \"span\",\n        variant: \"subtitle2\",\n        color: \"textSecondary\"\n      }, moment(createdAt).locale('es').fromNow())),\n      secondary: __jsx(React.Fragment, null, __jsx(Typography, {\n        component: \"span\",\n        variant: \"body1\",\n        className: classes.inline,\n        color: \"textPrimary\"\n      }, content))\n    }));\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}