{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\"; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\"; // core components\n\nimport GridContainer from \"../../../components/Grid/GridContainer\";\nimport GridItem from \"../../../components/Grid/GridItem\";\nimport Button from \"../../../components/Button\";\nimport styles from \"../../../assets/jss/nextjs-material-kit/pages/landingPageSections/user/lawStyles\";\nimport { FormControl, FormControlLabel, RadioGroup, Radio } from \"@material-ui/core\";\nimport CustomInput from \"../../../components/CustomInput\";\nimport { Search } from \"@material-ui/icons\";\nimport Title from \"../../../components/etihcs/Title\";\nimport { executeQuery } from \"../../../plugins/graphqlQueryRequest\";\nimport { searchQuery } from \"../../../utils/queries\";\nimport { searchTitleQuery, searchChapterQuery, searchArticleQuery } from '../../../utils/queries';\nimport { map, forEach, get, findIndex, unionBy } from \"lodash\";\nimport fetch from 'node-fetch';\nimport { API_URL, CLIENT_ID } from \"../../../utils/constants\";\nvar useStyles = makeStyles(styles);\nvar TITLE = 'title';\nvar CHAPTER = 'chapter';\nvar ARTICLE = 'article';\n\nvar searchLawContent = function searchLawContent() {\n  var _executeQuery = executeQuery(searchQuery),\n      data = _executeQuery.data;\n\n  if (data && data.titles) {\n    return data.titles;\n  }\n};\n\nexport default function LawSection() {\n  var classes = useStyles();\n\n  var _useState = useState(TITLE),\n      searchValue = _useState[0],\n      setSearchValue = _useState[1];\n\n  var _useState2 = useState(searchTitleQuery),\n      searchQuery = _useState2[0],\n      setSearchQuery = _useState2[1];\n\n  var _useState3 = useState(''),\n      searchText = _useState3[0],\n      setSearchText = _useState3[1];\n\n  var _useState4 = useState(searchLawContent()),\n      searched = _useState4[0],\n      setSearched = _useState4[1];\n\n  var handleRadioChange = function handleRadioChange(event) {\n    var value = event.target.value;\n    if (value === TITLE) setSearchQuery(searchTitleQuery);else if (value === CHAPTER) setSearchQuery(searchChapterQuery);else if (value === ARTICLE) setSearchQuery(searchArticleQuery);\n    setSearchValue(value);\n  };\n\n  var handlerSearch = function handlerSearch() {\n    var response, data, setData, setChapterData, _setData;\n\n    return _regeneratorRuntime.async(function handlerSearch$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(\"\".concat(API_URL), {\n              method: 'POST',\n              body: JSON.stringify({\n                query: searchQuery,\n                variables: {\n                  text: searchText\n                }\n              }),\n              headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': \"client_id \".concat(CLIENT_ID)\n              }\n            }).then(function (res) {\n              return res.json();\n            }));\n\n          case 3:\n            response = _context.sent;\n\n            if (response.data) {\n              data = response.data;\n              if (searchValue === TITLE) setSearched(data.titles);else if (searchValue === CHAPTER) {\n                setData = [];\n                forEach(data.chapters, function (chapter) {\n                  if (get(chapter, \"title.id\")) {\n                    var index = findIndex(setData, {\n                      id: get(chapter, \"title.id\")\n                    });\n                    if (index !== -1) setData[index].chapters = unionBy(setData[index].chapters, [_objectSpread({}, chapter)], 'id');else setData = unionBy(setData, [_objectSpread({}, chapter.title, {\n                      chapters: [_objectSpread({}, chapter)]\n                    })], 'id');\n                  }\n                });\n                setSearched(setData);\n              } else if (searchValue === ARTICLE) {\n                setChapterData = function setChapterData(chapters, article) {\n                  var index = findIndex(chapters, {\n                    id: get(article, \"chapter.id\")\n                  });\n\n                  if (index !== -1) {\n                    chapters[index].articles = unionBy(chapters[index].articles, [_objectSpread({}, article)], 'id');\n                    return chapters;\n                  } else return unionBy(chapters, [_objectSpread({}, article.chapter, {\n                    articles: [_objectSpread({}, article)]\n                  })], 'id');\n                };\n\n                _setData = [];\n                forEach(data.articles, function (article) {\n                  if (get(article, \"chapter.title.id\")) {\n                    var indexTitle = findIndex(_setData, {\n                      id: get(article, \"chapter.title.id\")\n                    });\n                    if (indexTitle !== -1) _setData[indexTitle].chapters = setChapterData(_setData[indexTitle].chapters, article);else _setData = unionBy(_setData, [_objectSpread({}, article.chapter.title, {\n                      chapters: setChapterData([], article)\n                    })], 'id');\n                  }\n                });\n                setSearched(_setData);\n              }\n            }\n\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log('=> Error: ', _context.t0.message);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  var handlerSearchText = function handlerSearchText(event) {\n    setSearchText(event.target.value);\n  };\n\n  if (searched) {\n    return __jsx(\"div\", {\n      className: classes.section\n    }, __jsx(\"h1\", {\n      className: classes.title\n    }, \"B\\xFAsqueda\"), __jsx(GridContainer, {\n      justify: \"center\"\n    }, __jsx(GridItem, {\n      xs: 12,\n      sm: 12,\n      md: 8\n    }, __jsx(FormControl, {\n      component: \"fieldset\"\n    }, __jsx(RadioGroup, {\n      row: true,\n      \"aria-label\": \"search\",\n      name: \"search\",\n      value: searchValue,\n      onChange: handleRadioChange\n    }, __jsx(FormControlLabel, {\n      value: \"title\",\n      control: __jsx(Radio, null),\n      label: \"Titulo\",\n      labelPlacement: \"bottom\",\n      classes: {\n        label: classes.label,\n        root: classes.labelRoot\n      }\n    }), __jsx(FormControlLabel, {\n      value: \"chapter\",\n      control: __jsx(Radio, null),\n      label: \"Capitulo\",\n      labelPlacement: \"bottom\",\n      classes: {\n        label: classes.label,\n        root: classes.labelRoot\n      }\n    }), __jsx(FormControlLabel, {\n      value: \"article\",\n      control: __jsx(Radio, null),\n      label: \"Articulo\",\n      labelPlacement: \"bottom\",\n      classes: {\n        label: classes.label,\n        root: classes.labelRoot\n      }\n    }))))), __jsx(GridContainer, {\n      justify: \"center\"\n    }, __jsx(GridItem, {\n      xs: 12,\n      sm: 12,\n      md: 12,\n      lg: 4\n    }, __jsx(CustomInput, {\n      labelText: \"B\\xFAscar\",\n      id: \"material\",\n      onChange: handlerSearchText,\n      formControlProps: {\n        fullWidth: true\n      }\n    }), __jsx(Button, {\n      justIcon: true,\n      round: true,\n      color: \"white\",\n      onClick: handlerSearch\n    }, __jsx(Search, {\n      className: classes.searchIcon\n    })))), __jsx(GridContainer, {\n      className: classes.gridScroll,\n      justify: \"center\"\n    }, map(searched, function (_ref) {\n      var id = _ref.id,\n          number = _ref.number,\n          name = _ref.name,\n          chapters = _ref.chapters;\n      return __jsx(GridItem, {\n        key: id,\n        xs: 12,\n        sm: 12,\n        md: 12,\n        lg: 8\n      }, __jsx(Title, {\n        id: id,\n        number: number,\n        name: name,\n        chapters: chapters\n      }));\n    })));\n  } else {\n    return __jsx(\"div\", {\n      className: classes.section\n    }, __jsx(\"h1\", null, \"Loading...\"));\n  }\n}","map":null,"metadata":{},"sourceType":"module"}