{"ast":null,"code":"var _jsxFileName = \"/home/charlie/MEGAsync/Ingenieria Sistemas/DECIMO SEMESTRE/Etica/app-ley842/pages-sections/LandingPage-Sections/user/CommentsSection.jsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport styles from \"../../../assets/jss/nextjs-material-kit/pages/landingPageSections/commentsStyles\";\nimport { TextField, List, ListItem, ListItemAvatar, Avatar, ListItemText, Typography, CircularProgress } from '@material-ui/core';\nimport GridContainer from \"../../../components/Grid/GridContainer\";\nimport GridItem from \"../../../components/Grid/GridItem\";\nimport { executeQuery } from \"../../../plugins/graphqlQueryRequest\";\nimport { commentsQuery, createCommentMutation } from \"../../../utils/queries\";\nimport { AccountCircle, AddComment } from '@material-ui/icons';\nimport { map, orderBy, isEmpty } from 'lodash';\nimport moment from 'moment';\nimport Button from \"../../../components/Button\";\nimport { API_URL, CLIENT_ID } from \"../../../utils/constants\";\nimport { gql } from \"apollo-boost\";\nimport fetch from 'node-fetch';\nconst useStyles = makeStyles(styles);\n\nconst findComments = () => {\n  const {\n    data\n  } = executeQuery(gql(commentsQuery));\n\n  if (data && data.comments) {\n    return orderBy(data.comments, ({\n      createdAt\n    }) => {\n      return moment(createdAt);\n    }, ['desc']);\n  }\n};\n\nexport default function CommentsSection() {\n  const classes = useStyles();\n  const {\n    0: comments,\n    1: setComments\n  } = useState(findComments());\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState('');\n  const [loading, setLoading] = React.useState(false);\n\n  const handlerCommentText = event => {\n    setCommentText(event.target.value);\n  };\n\n  const handlerPostComment = async () => {\n    if (!isEmpty(commentText)) {\n      try {\n        setLoading(true);\n        await fetch(`${API_URL}`, {\n          method: 'POST',\n          body: JSON.stringify({\n            query: createCommentMutation,\n            variables: {\n              comment: commentText\n            }\n          }),\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            'Authorization': `client_id ${CLIENT_ID}`\n          }\n        }).then(res => res.json());\n        const {\n          data\n        } = await fetch(`${API_URL}`, {\n          method: 'POST',\n          body: JSON.stringify({\n            query: commentsQuery\n          }),\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            'Authorization': `client_id ${CLIENT_ID}`\n          }\n        }).then(res => res.json());\n        setCommentText('');\n        setComments(orderBy(data.comments, ({\n          createdAt\n        }) => {\n          return moment(createdAt);\n        }, ['desc']));\n        setLoading(false);\n      } catch (error) {\n        console.error('Error: ', error.message);\n      }\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: classes.section,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, __jsx(GridContainer, {\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, __jsx(TextField, {\n    id: \"outlined-multiline-static\",\n    label: \"Deja tu comentario\",\n    fullWidth: true,\n    multiline: true,\n    onChange: handlerCommentText,\n    rows: 4,\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }), __jsx(\"div\", {\n    className: classes.wrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    disabled: loading,\n    color: \"rose\",\n    size: \"sm\",\n    onClick: handlerPostComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 25\n    }\n  }, __jsx(AddComment, {\n    className: \"fas fa-play\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 29\n    }\n  }), \" Comentar\")), loading && __jsx(CircularProgress, {\n    size: 24,\n    className: classes.buttonProgress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 33\n    }\n  }))), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, __jsx(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }, map(comments, ({\n    id,\n    content,\n    createdAt\n  }) => {\n    return __jsx(ListItem, {\n      key: id,\n      alignItems: \"flex-start\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 33\n      }\n    }, __jsx(ListItemAvatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 37\n      }\n    }, __jsx(Avatar, {\n      alt: \"Remy Sharp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 41\n      }\n    }, \" \", __jsx(AccountCircle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 67\n      }\n    }), \" \")), __jsx(ListItemText, {\n      primary: __jsx(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 45\n        }\n      }, __jsx(Typography, {\n        component: \"span\",\n        variant: \"subtitle2\",\n        color: \"textSecondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 49\n        }\n      }, moment(createdAt).locale('es').fromNow())),\n      secondary: __jsx(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 45\n        }\n      }, __jsx(Typography, {\n        component: \"span\",\n        variant: \"body1\",\n        className: classes.inline,\n        color: \"textPrimary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 49\n        }\n      }, content)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 37\n      }\n    }));\n  }))));\n}","map":{"version":3,"sources":["/home/charlie/MEGAsync/Ingenieria Sistemas/DECIMO SEMESTRE/Etica/app-ley842/pages-sections/LandingPage-Sections/user/CommentsSection.jsx"],"names":["React","useState","makeStyles","styles","TextField","List","ListItem","ListItemAvatar","Avatar","ListItemText","Typography","CircularProgress","GridContainer","GridItem","executeQuery","commentsQuery","createCommentMutation","AccountCircle","AddComment","map","orderBy","isEmpty","moment","Button","API_URL","CLIENT_ID","gql","fetch","useStyles","findComments","data","comments","createdAt","CommentsSection","classes","setComments","commentText","setCommentText","loading","setLoading","handlerCommentText","event","target","value","handlerPostComment","method","body","JSON","stringify","query","variables","comment","headers","then","res","json","error","console","message","section","wrapper","buttonProgress","id","content","locale","fromNow","inline"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport styles from \"../../../assets/jss/nextjs-material-kit/pages/landingPageSections/commentsStyles\";\nimport {\n    TextField,\n    List,\n    ListItem,\n    ListItemAvatar,\n    Avatar,\n    ListItemText,\n    Typography,\n    CircularProgress\n} from '@material-ui/core';\nimport GridContainer from \"../../../components/Grid/GridContainer\";\nimport GridItem from \"../../../components/Grid/GridItem\";\nimport {executeQuery} from \"../../../plugins/graphqlQueryRequest\";\nimport {commentsQuery, createCommentMutation} from \"../../../utils/queries\";\nimport {AccountCircle, AddComment} from '@material-ui/icons';\nimport { map, orderBy, isEmpty } from 'lodash';\nimport moment from 'moment';\nimport Button from \"../../../components/Button\";\nimport {API_URL, CLIENT_ID} from \"../../../utils/constants\";\nimport {gql} from \"apollo-boost\";\nimport fetch from 'node-fetch';\n\nconst useStyles = makeStyles(styles);\n\nconst findComments = () => {\n    const { data } = executeQuery( gql(commentsQuery) )\n    if( data && data.comments ) {\n        return  orderBy( data.comments, ( { createdAt } ) => {\n            return moment(createdAt); }, ['desc']\n        );\n    }\n}\n\nexport default function CommentsSection (){\n    const classes = useStyles();\n    const [comments, setComments] = useState( findComments() )\n    const [commentText, setCommentText] = useState( '' )\n    const [loading, setLoading] = React.useState(false);\n\n    const handlerCommentText = ( event ) => {\n        setCommentText( event.target.value )\n    }\n\n    const handlerPostComment = async () => {\n        if( !isEmpty(commentText) ){\n            try {\n                setLoading( true )\n                await fetch( `${API_URL}`, {\n                    method: 'POST',\n                    body: JSON.stringify({\n                        query: createCommentMutation,\n                        variables:{ comment: commentText }\n                    }),\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json',\n                        'Authorization': `client_id ${CLIENT_ID}`\n                    }\n                } ).then( (res) => res.json() )\n                const { data } = await fetch( `${API_URL}`, {\n                    method: 'POST',\n                    body: JSON.stringify({ query: commentsQuery }),\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json',\n                        'Authorization': `client_id ${CLIENT_ID}`\n                    }\n                } ).then( (res) => res.json() )\n                setCommentText( '' )\n                setComments(  orderBy( data.comments, ( { createdAt } ) => {\n                    return moment(createdAt); }, ['desc']\n                ) )\n                setLoading( false )\n            } catch (error){\n                console.error( 'Error: ', error.message )\n            }\n        }\n    }\n\n    return(\n        <div className={classes.section}>\n            <GridContainer justify=\"center\">\n                <GridItem xs={12} sm={12} md={10}>\n                    <TextField\n                        id=\"outlined-multiline-static\"\n                        label=\"Deja tu comentario\"\n                        fullWidth\n                        multiline\n                        onChange={handlerCommentText}\n                        rows={4}\n                        variant=\"outlined\"\n                    />\n                    <div className={classes.wrapper}>\n                        <Button disabled={loading} color=\"rose\" size=\"sm\" onClick={handlerPostComment} >\n                            <AddComment className=\"fas fa-play\" /> Comentar\n                        </Button>\n                    </div>\n                    {loading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                </GridItem>\n            </GridContainer>\n            <div>\n                <List>\n                    {\n                        map( comments, ( {id, content, createdAt} ) => {\n                            return (\n                                <ListItem key={id} alignItems=\"flex-start\">\n                                    <ListItemAvatar>\n                                        <Avatar alt=\"Remy Sharp\"> <AccountCircle/> </Avatar>\n                                    </ListItemAvatar>\n                                    <ListItemText\n                                        primary={\n                                            <React.Fragment>\n                                                <Typography component=\"span\" variant=\"subtitle2\" color=\"textSecondary\">\n                                                    { moment( createdAt ).locale('es').fromNow() }\n                                                </Typography>\n                                            </React.Fragment>\n                                        }\n                                        secondary={\n                                            <React.Fragment>\n                                                <Typography component=\"span\" variant=\"body1\" className={classes.inline} color=\"textPrimary\">\n                                                    { content }\n                                                </Typography>\n                                            </React.Fragment>\n                                        }\n                                    />\n                                </ListItem>\n                            )\n                        } )\n                    }\n                </List>\n            </div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}