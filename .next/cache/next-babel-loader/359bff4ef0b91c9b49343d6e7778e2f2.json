{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport styles from \"../../../assets/jss/nextjs-material-kit/pages/landingPageSections/commentsStyles\";\nimport { TextField, List, ListItem, ListItemAvatar, Avatar, ListItemText, Typography, CircularProgress } from '@material-ui/core';\nimport GridContainer from \"../../../components/Grid/GridContainer\";\nimport GridItem from \"../../../components/Grid/GridItem\";\nimport { executeQuery } from \"../../../plugins/graphqlQueryRequest\";\nimport { commentsQuery, createCommentMutation } from \"../../../utils/queries\";\nimport { AccountCircle, AddComment } from '@material-ui/icons';\nimport { map, orderBy, isEmpty } from 'lodash';\nimport moment from 'moment';\nimport Button from \"../../../components/Button\";\nimport { API_URL, CLIENT_ID } from \"../../../utils/constants\";\nimport { gql } from \"apollo-boost\";\nimport fetch from 'node-fetch';\nvar useStyles = makeStyles(styles);\n\nvar findComments = function findComments() {\n  var _executeQuery = executeQuery(gql(commentsQuery)),\n      data = _executeQuery.data;\n\n  if (data && data.comments) {\n    return orderBy(data.comments, function (_ref) {\n      var createdAt = _ref.createdAt;\n      return moment(createdAt);\n    }, ['desc']);\n  }\n};\n\nexport default function CommentsSection() {\n  var classes = useStyles();\n\n  var _useState = useState(findComments()),\n      comments = _useState[0],\n      setComments = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loading = _React$useState2[0],\n      setLoading = _React$useState2[1];\n\n  var handlerCommentText = function handlerCommentText(event) {\n    setCommentText(event.target.value);\n  };\n\n  var handlerPostComment = function handlerPostComment() {\n    var _await$fetch$then, data;\n\n    return _regeneratorRuntime.async(function handlerPostComment$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (isEmpty(commentText)) {\n              _context.next = 17;\n              break;\n            }\n\n            _context.prev = 1;\n            setLoading(true);\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(fetch(\"\".concat(API_URL), {\n              method: 'POST',\n              body: JSON.stringify({\n                query: createCommentMutation,\n                variables: {\n                  comment: commentText\n                }\n              }),\n              headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': \"client_id \".concat(CLIENT_ID)\n              }\n            }).then(function (res) {\n              return res.json();\n            }));\n\n          case 5:\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(fetch(\"\".concat(API_URL), {\n              method: 'POST',\n              body: JSON.stringify({\n                query: commentsQuery\n              }),\n              headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': \"client_id \".concat(CLIENT_ID)\n              }\n            }).then(function (res) {\n              return res.json();\n            }));\n\n          case 7:\n            _await$fetch$then = _context.sent;\n            data = _await$fetch$then.data;\n            setCommentText('');\n            setComments(orderBy(data.comments, function (_ref2) {\n              var createdAt = _ref2.createdAt;\n              return moment(createdAt);\n            }, ['desc']));\n            setLoading(false);\n            _context.next = 17;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](1);\n            console.error('Error: ', _context.t0.message);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 14]], Promise);\n  };\n\n  return __jsx(\"div\", {\n    className: classes.section\n  }, __jsx(GridContainer, {\n    justify: \"center\"\n  }, __jsx(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 10\n  }, __jsx(TextField, {\n    id: \"outlined-multiline-static\",\n    label: \"Deja tu comentario\",\n    fullWidth: true,\n    multiline: true,\n    onChange: handlerCommentText,\n    rows: 4,\n    variant: \"outlined\"\n  }), __jsx(\"div\", {\n    className: classes.wrapper\n  }, __jsx(Button, {\n    disabled: loading,\n    color: \"rose\",\n    size: \"sm\",\n    onClick: handlerPostComment\n  }, __jsx(AddComment, {\n    className: \"fas fa-play\"\n  }), \" Comentar\"), loading && __jsx(CircularProgress, {\n    size: 24,\n    className: classes.buttonProgress\n  })))), __jsx(\"div\", null, __jsx(List, null, map(comments, function (_ref3) {\n    var id = _ref3.id,\n        content = _ref3.content,\n        createdAt = _ref3.createdAt;\n    return __jsx(ListItem, {\n      key: id,\n      alignItems: \"flex-start\"\n    }, __jsx(ListItemAvatar, null, __jsx(Avatar, {\n      alt: \"Remy Sharp\"\n    }, \" \", __jsx(AccountCircle, null), \" \")), __jsx(ListItemText, {\n      primary: __jsx(React.Fragment, null, __jsx(Typography, {\n        component: \"span\",\n        variant: \"subtitle2\",\n        color: \"textSecondary\"\n      }, moment(createdAt).locale('es').fromNow())),\n      secondary: __jsx(React.Fragment, null, __jsx(Typography, {\n        component: \"span\",\n        variant: \"body1\",\n        className: classes.inline,\n        color: \"textPrimary\"\n      }, content))\n    }));\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}