{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\"; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\"; // core components\n\nimport GridContainer from \"../../../components/Grid/GridContainer\";\nimport GridItem from \"../../../components/Grid/GridItem\";\nimport Button from \"../../../components/Button\";\nimport styles from \"../../../assets/jss/nextjs-material-kit/pages/landingPageSections/user/lawStyles\";\nimport { FormControl, FormControlLabel, RadioGroup, Radio, CircularProgress } from \"@material-ui/core\";\nimport CustomInput from \"../../../components/CustomInput\";\nimport { Search } from \"@material-ui/icons\";\nimport Title from \"../../../components/etihcs/Title\";\nimport { executeQuery } from \"../../../plugins/graphqlQueryRequest\";\nimport { searchQuery } from \"../../../utils/queries\";\nimport { searchTitleQuery, searchChapterQuery, searchArticleQuery } from '../../../utils/queries';\nimport { map, forEach, get, findIndex, unionBy, isEmpty } from \"lodash\";\nimport fetch from 'node-fetch';\nimport { API_URL, CLIENT_ID } from \"../../../utils/constants\";\nconst useStyles = makeStyles(styles);\nconst TITLE = 'title';\nconst CHAPTER = 'chapter';\nconst ARTICLE = 'article';\n\nconst searchLawContent = () => {\n  const {\n    data\n  } = executeQuery(searchQuery);\n\n  if (data && data.titles) {\n    return data.titles;\n  }\n};\n\nexport default function LawSection() {\n  const classes = useStyles();\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(TITLE);\n  const {\n    0: searchQuery,\n    1: setSearchQuery\n  } = useState(searchTitleQuery);\n  const {\n    0: searchText,\n    1: setSearchText\n  } = useState('');\n  const {\n    0: searched,\n    1: setSearched\n  } = useState(searchLawContent());\n  const [loading, setLoading] = React.useState(false);\n\n  const handleRadioChange = event => {\n    const value = event.target.value;\n    if (value === TITLE) setSearchQuery(searchTitleQuery);else if (value === CHAPTER) setSearchQuery(searchChapterQuery);else if (value === ARTICLE) setSearchQuery(searchArticleQuery);\n    setSearchValue(value);\n  };\n\n  const handlerSearch = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(`${API_URL}`, {\n        method: 'POST',\n        body: JSON.stringify({\n          query: searchQuery,\n          variables: {\n            text: searchText\n          }\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Authorization': `client_id ${CLIENT_ID}`\n        }\n      }).then(res => res.json());\n\n      if (response.data) {\n        const data = response.data;\n        if (searchValue === TITLE) setSearched(data.titles);else if (searchValue === CHAPTER) {\n          let setData = [];\n          forEach(data.chapters, chapter => {\n            if (get(chapter, `title.id`)) {\n              const index = findIndex(setData, {\n                id: get(chapter, `title.id`)\n              });\n              if (index !== -1) setData[index].chapters = unionBy(setData[index].chapters, [_objectSpread({}, chapter)], 'id');else setData = unionBy(setData, [_objectSpread({}, chapter.title, {\n                chapters: [_objectSpread({}, chapter)]\n              })], 'id');\n            }\n          });\n          setSearched(setData);\n        } else if (searchValue === ARTICLE) {\n          const setChapterData = (chapters, article) => {\n            const index = findIndex(chapters, {\n              id: get(article, `chapter.id`)\n            });\n\n            if (index !== -1) {\n              chapters[index].articles = unionBy(chapters[index].articles, [_objectSpread({}, article)], 'id');\n              return chapters;\n            } else return unionBy(chapters, [_objectSpread({}, article.chapter, {\n              articles: [_objectSpread({}, article)]\n            })], 'id');\n          };\n\n          let setData = [];\n          forEach(data.articles, article => {\n            if (get(article, `chapter.title.id`)) {\n              const indexTitle = findIndex(setData, {\n                id: get(article, `chapter.title.id`)\n              });\n              if (indexTitle !== -1) setData[indexTitle].chapters = setChapterData(setData[indexTitle].chapters, article);else setData = unionBy(setData, [_objectSpread({}, article.chapter.title, {\n                chapters: setChapterData([], article)\n              })], 'id');\n            }\n          });\n          setSearched(setData);\n        }\n      }\n\n      setLoading(false);\n    } catch (error) {\n      console.log('=> Error: ', error.message);\n    }\n  };\n\n  const handlerSearchText = event => {\n    setSearchText(event.target.value);\n  };\n\n  if (searched) {\n    return __jsx(\"div\", {\n      className: classes.section\n    }, __jsx(\"h2\", {\n      className: classes.title\n    }, \"B\\xFAsqueda\"), __jsx(GridContainer, {\n      justify: \"center\"\n    }, __jsx(GridItem, {\n      xs: 12,\n      sm: 12,\n      md: 8\n    }, __jsx(FormControl, {\n      component: \"fieldset\"\n    }, __jsx(RadioGroup, {\n      row: true,\n      \"aria-label\": \"search\",\n      name: \"search\",\n      value: searchValue,\n      onChange: handleRadioChange\n    }, __jsx(FormControlLabel, {\n      value: \"title\",\n      control: __jsx(Radio, null),\n      label: \"Titulo\",\n      labelPlacement: \"bottom\",\n      classes: {\n        label: classes.label,\n        root: classes.labelRoot\n      }\n    }), __jsx(FormControlLabel, {\n      value: \"chapter\",\n      control: __jsx(Radio, null),\n      label: \"Capitulo\",\n      labelPlacement: \"bottom\",\n      classes: {\n        label: classes.label,\n        root: classes.labelRoot\n      }\n    }), __jsx(FormControlLabel, {\n      value: \"article\",\n      control: __jsx(Radio, null),\n      label: \"Articulo\",\n      labelPlacement: \"bottom\",\n      classes: {\n        label: classes.label,\n        root: classes.labelRoot\n      }\n    }))))), __jsx(GridContainer, {\n      justify: \"center\"\n    }, __jsx(GridItem, {\n      xs: 12,\n      sm: 12,\n      md: 12,\n      lg: 4\n    }, __jsx(CustomInput, {\n      labelText: \"B\\xFAscar\",\n      id: \"material\",\n      onChange: handlerSearchText,\n      formControlProps: {\n        fullWidth: true\n      }\n    }), __jsx(\"div\", {\n      className: classes.wrapper\n    }, __jsx(Button, {\n      disabled: loading,\n      justIcon: true,\n      round: true,\n      color: \"rose\",\n      onClick: handlerSearch\n    }, __jsx(Search, {\n      className: classes.searchIcon\n    })), loading && __jsx(CircularProgress, {\n      size: 24,\n      className: classes.buttonProgress\n    })))), __jsx(GridContainer, {\n      className: classes.gridScroll,\n      justify: \"center\"\n    }, (() => {\n      if (isEmpty(searched)) return __jsx(GridItem, {\n        xs: 12,\n        sm: 12,\n        md: 12,\n        lg: 8\n      }, __jsx(\"h3\", {\n        className: classes.title\n      }, \"\\\"No se encontraron concidencias\\\"\"));else return map(searched, ({\n        id,\n        number,\n        name,\n        chapters\n      }) => {\n        return __jsx(GridItem, {\n          key: id,\n          xs: 12,\n          sm: 12,\n          md: 12,\n          lg: 8\n        }, __jsx(Title, {\n          id: id,\n          number: number,\n          name: name,\n          chapters: chapters\n        }));\n      });\n    })()));\n  } else {\n    return __jsx(\"div\", {\n      className: classes.section\n    }, __jsx(\"h1\", null, \"Loading...\"));\n  }\n}","map":null,"metadata":{},"sourceType":"module"}